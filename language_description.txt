// Game declaration syntax
game:            player_list ";"
                 piece_list ";"
                 (macro_def ";")*
                 (rule ";")*
                 (post_condition ";")*
                 board_size ";"
                 board ";"

// Player declaration syntax
player_list:     "players" "=" player ("," player)*
player:          string

// Piece declaration syntax
piece_list:      "pieces" "=" piece ("," piece)*
piece:           string ("(" player ")")?

// Board declaration syntax
board_size:      "board_size" "=" int "," int
board:           "board" "=" board_piece ("," board_piece)*
board_piece:     string

// Rule syntax
rule:            "rule" piece "=" sentence

// Macro syntax
macro_def:       "macro" macro_name "(" arguments? ")" = macro_sentence
macro_call:      macro_name "(" arguments? ")"
macro_name:      string
arguments:       argument ("," argument)*
argument:        int | string

macro_sentence:  macro_word ("|" macro_word)*
macro_word:      (macro_core_word unary_op | macro_core_word | macro_call)+
macro_core_word: "(" macro_sentence ")" | macro_letter
macro_letter:    "[" string "," string "," string "]" ("{" string "}")?

// Post condition syntax
post_condition:  "post" player piece "=" sentence

// Regular expression syntax
sentence:        word ("|" word)*
word:            (core_word unary_op | core_word | macro_call)+
core_word:       "(" sentence ")" | letter
letter:          "[" int "," int "," string "]" ("{" string "}")?

// Common
int:             CLASS OF INTEGERS
string:          CLASS OF STRINGS WITHOUT INTEGERS
unary_op:        "*" | "?" | "+"
