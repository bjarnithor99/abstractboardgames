Players = white, black;
Pieces =
    WhitePawn(white), BlackPawn(black),
    WhiteKnight(white), BlackKnight(black),
    WhiteBishop(white), BlackBishop(black),
    WhiteRook(white), BlackRook(black),
    WhiteQueen(white), BlackQueen(black),
    WhiteKing(white), BlackKing(black);

macro Ray(dx,dy) = (dx, dy, empty)*Step(dx, dy);
macro Step(dx, dy) = (dx, dy, empty) | (dx, dy, enemy);

effect PromoteToWhiteQueen() {Board[this.x][this.y] = WhiteQueen;};
effect PromoteToWhiteRook() {Board[this.x][this.y] = WhiteRook;};
effect PromoteToWhiteKnight() {Board[this.x][this.y] = WhiteKnight;};
effect PromoteToWhiteBishop() {Board[this.x][this.y] = WhiteBishop;};

effect PromoteToBlackQueen() {Board[this.x][this.y] = BlackQueen;};
effect PromoteToBlackRook() {Board[this.x][this.y] = BlackRook;};
effect PromoteToBlackKnight() {Board[this.x][this.y] = BlackKnight;};
effect PromoteToBlackBishop() {Board[this.x][this.y] = BlackBishop;};

predicate WhiteBackLane() {return this.y==7;};
predicate NotWhiteBackLane() {return this.y!=7;};

predicate BlackBackLane() {return this.y==1;};
predicate NotBlackBackLane() {return this.y!=1;};

macro WhitePromote() = 
    (0,0,WhiteBackLane()){PromoteToWhiteKnight()} |
    (0,0,WhiteBackLane()){PromoteToWhiteBishop()} |
    (0,0,WhiteBackLane()){PromoteToWhiteQueen()} |
    (0,0,WhiteBackLane()){PromoteToWhiteRook()};

macro BlackPromote() = 
    (0,0,BlackBackLane()){PromoteToBlackKnight()} |
    (0,0,BlackBackLane()){PromoteToBlackBishop()} |
    (0,0,BlackBackLane()){PromoteToBlackQueen()} |
    (0,0,BlackBackLane()){PromoteToBlackRook()};

macro BishopMacro() = Ray(-1,1) | Ray(1,-1) | Ray(1,1) | Ray(-1,-1);
macro RookMacro() = Ray(0,1) | Ray(0,-1) | Ray(1,0) | Ray(-1,0);
macro QueenMacro() = BishopMacro() | RookMacro();
macro KingSteps() = Step(1,0) | Step(0,1) | Step(-1,0) | Step(0,-1) |
                Step(1,1) | Step(-1,1) | Step(1,-1) | Step(-1,-1);

effect Move(x, y, dx, dy) {
    Board[x+dx][y+dy] = jon;
    Board[x][y] = None;
};

variable blackLeftRookMoved = 0;
variable blackRightRookMoved = 0;
variable whiteLeftRookMoved = 0;
variable whiteRightRookMoved = 0;
variable whiteKingMoved = 0;

predicate WhiteRightPiecesUnmoved() {return (not whiteRightRookMoved) and (not whiteKingMoved);};


macro Castling(y) = (1,0,empty)(1,0,empty)(0,0,WhiteRightPiecesUnmoved()){Move(7, y, -2, 0)};

macro KingMacro(y) = KingSteps() | Castling(y);

macro T(dx, dy) = Step(dx*2,dy) | Step(dx,dy*2);
macro KnightMacro() = T(1, 1) | T(-1, 1)| T(1, -1)| T(-1, -1);


rule WhiteKing = KingMacro(0); rule BlackKing = KingMacro(7);
rule WhiteQueen = QueenMacro(); rule BlackQueen = QueenMacro();
rule WhiteRook = RookMacro(); rule BlackRook = RookMacro();
rule WhiteBishop = BishopMacro(); rule BlackBishop = BishopMacro();
rule WhiteKnight = KnightMacro(); rule BlackKnight = KnightMacro();


predicate yis1() {return this.y == 1;};
rule WhitePawn = (
        (0,1,empty) |
        (1,1, enemy) | 
        (-1,1, enemy)
    )(WhitePromote() | (0,0,NotWhiteBackLane())) |
    (0,0,yis1())(0,2,empty);


predicate yis6() {return this.y == 6;};
rule BlackPawn = (
        (0,-1,empty) |
        (1,-1, enemy) | 
        (-1,-1, enemy)
    )(BlackPromote() | (0,0,NotBlackBackLane())) |
    (0,0,yis6())(0,-2,empty);


BoardSize = 8, 8;
Board = 
    BlackRook, BlackKnight, BlackBishop, BlackKing, BlackQueen, BlackBishop, BlackKnight, BlackRook,
    BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn,
    WhiteRook, WhiteKnight, WhiteBishop, WhiteKing, WhiteQueen, WhiteBishop, WhiteKnight, WhiteRook
;