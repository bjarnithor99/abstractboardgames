players = white, black;
pieces =
    WhitePawn(white), BlackPawn(black),
    WhiteKnight(white), BlackKnight(black),
    WhiteBishop(white), BlackBishop(black),
    WhiteRook(white), BlackRook(black),
    WhiteQueen(white), BlackQueen(black),
    WhiteKing(white), BlackKing(black);

macro Step(dx, dy) = [dx, dy, empty] | [dx, dy, enemy];
macro Ray(dx,dy) = [dx, dy, empty]*Step(dx, dy);

macro BishopMacro() = Ray(-1,1) | Ray(1,-1) | Ray(1,1) | Ray(-1,-1);
macro RookMacro() = Ray(0,1) | Ray(0,-1) | Ray(1,0) | Ray(-1,0);
macro QueenMacro() = BishopMacro() | RookMacro();
macro KingSteps() = Step(1,0) | Step(0,1) | Step(-1,0) | Step(0,-1) |
                Step(1,1) | Step(-1,1) | Step(1,-1) | Step(-1,-1);
macro T(dx, dy) = Step(dx*2,dy) | Step(dx,dy*2);
macro KnightMacro() = T(1, 1) | T(-1, 1)| T(1, -1)| T(-1, -1);

variable blackLeftRookMoved = 0;
variable blackRightRookMoved = 0;
variable blackKingMoved = 0;

variable whiteLeftRookMoved = 0;
variable whiteRightRookMoved = 0;
variable whiteKingMoved = 0;

effect Move(x, y, dx, dy) {
    Board[x+dx][y+dy] = Board[x][y];
    Board[x][y] = None;
};


function UnderAttack() = 
    BishopMacro()[0,0,BlackBishop or WhiteBishop] |
    RookMacro()[0,0,BlackRook or WhiteRook] |
    QueenMacro()[0,0,BlackQueen or WhiteQueen] |
    KnightMacro()[0,0,BlackKnight or WhiteKnight] |
    KingSteps()[0,0,BlackKing or WhiteKing] |
        ([1,1,enemy and BlackPawn] | [-1,1,enemy and BlackPawn]) |
        ([1,-1,enemy and WhitePawn] | [-1,-1,enemy and WhitePawn])
    ;


macro Castling(y) = [0,0,not UnderAttack()][1,0,empty][0,0,not UnderAttack()][1,0,empty][0,0,not whiteRightRookMoved and not whiteKingMoved]{Move(7, y, -2, 0)};
macro KingMacro(y) = KingSteps() | Castling(y);

effect WKMoved() {whiteKingMoved = 1;};
rule WhiteKing = KingMacro(0)[0,0,not UnderAttack()]{WKMoved()};
effect BKMoved() {blackKingMoved = 1;};
rule BlackKing = KingMacro(7)[0,0,not UnderAttack()]{BKMoved()};


rule WhiteQueen = QueenMacro(); rule BlackQueen = QueenMacro();
rule WhiteRook = RookMacro(); rule BlackRook = RookMacro();
rule WhiteBishop = BishopMacro(); rule BlackBishop = BishopMacro();
rule WhiteKnight = KnightMacro(); rule BlackKnight = KnightMacro();


#--Pawn code--
effect PromoteToWhiteQueen() {Board[this.x][this.y] = WhiteQueen;};
effect PromoteToWhiteRook() {Board[this.x][this.y] = WhiteRook;};
effect PromoteToWhiteKnight() {Board[this.x][this.y] = WhiteKnight;};
effect PromoteToWhiteBishop() {Board[this.x][this.y] = WhiteBishop;};

effect PromoteToBlackQueen() {Board[this.x][this.y] = BlackQueen;};
effect PromoteToBlackRook() {Board[this.x][this.y] = BlackRook;};
effect PromoteToBlackKnight() {Board[this.x][this.y] = BlackKnight;};
effect PromoteToBlackBishop() {Board[this.x][this.y] = BlackBishop;};


macro WhitePromotePossibility() = 
    (
        [0,0,this.y==7]{PromoteToWhiteKnight()} |
        [0,0,this.y==7]{PromoteToWhiteBishop()} |
        [0,0,this.y==7]{PromoteToWhiteQueen()} |
        [0,0,this.y==7]{PromoteToWhiteRook()}
    ) |
        [0,0,this.y!=7]
    ;

macro BlackPromotePossibility() =
    (
        [0,0,this.y==0]{PromoteToBlackKnight()} |
        [0,0,this.y==0]{PromoteToBlackBishop()} |
        [0,0,this.y==0]{PromoteToBlackQueen()} |
        [0,0,this.y==0]{PromoteToBlackRook()}
    ) |
        [0,0,this.y!=0]
    ;

rule WhitePawn = 
    (
        [0,1,empty] |
        [1,1, enemy] | 
        [-1,1, enemy]
    )WhitePromotePossibility() |
    [0,0,this.y==1][0,1,empty][0,1,empty];


rule BlackPawn = 
    (
        [0,-1, empty] |
        [1,-1, enemy] | 
        [-1,-1, enemy]
    )BlackPromotePossibility() |
    [0,0,this.y==6][0,-1,empty][0,-1,empty];

victory white {return 0;};
victory black {return 0;};

board_size = 8, 8;
board = 
    BlackRook, BlackKnight, BlackBishop, BlackQueen, BlackKing, BlackBishop, BlackKnight, BlackRook,
    BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn, BlackPawn,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None, None,
    WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn, WhitePawn,
    WhiteRook, WhiteKnight, WhiteBishop, WhiteQueen, WhiteKing, WhiteBishop, WhiteKnight, WhiteRook
;